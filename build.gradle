plugins {
    id 'com.github.sherter.google-java-format' version '0.6'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'net.ltgt.apt' version '0.17'
}

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        mavenCentral()
        jcenter()
    }

    wrapper {
        gradleVersion = '4.8.1'
    }

    checkstyle {
        version = '8.3'
        configFile = rootProject.file("checkstyle.xml")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = '0.8.1'
    }

    test {
        // Enable JUnit 5 (Gradle 4.6+).
        useJUnitPlatform()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.0'

//        apt "org.projectlombok:lombok:1.18.0"

        testCompile(
                'org.projectlombok:lombok:1.18.0',
                'com.jsoniter:jsoniter:0.9.15',
                'org.cthul:cthul-matchers:1.1.0',
                'org.hamcrest:java-hamcrest:2.0.0.0',
                'org.hamcrest:hamcrest-junit:2.0.0.0'
        )

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    logger.info("Root Report...")

//    onlyIf = {
//        true
//    }
//    doFirst {
//        executionData = files(executionData.findAll {
//            it.exists()
//        })
//    }
}

